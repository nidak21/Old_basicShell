#!/usr/bin/env python2.7

# Read 2 text files and output set union/intersection/difference of their lines
#

import sys
import argparse

def parseCmdLine():
    parser = argparse.ArgumentParser( \
    description='Read text from stdin, write figure text to stdout.')

    parser.add_argument('-v', '--verbose', dest='verbose', action='store_true',
	help="include helpful messages to stderr")

    parser.add_argument('-o', dest='setOp', action='store',
	choices=['intersect', 'int', 'union', 'difference', 'diff'],
	default='intersect',
        required=False, help="which set operation. Default: intersect")

    parser.add_argument('-d', '--delim', dest='delim', action='store',
	default='\n', required=False,
	help="line/record delimiter. Default: \\n")

    parser.add_argument('files', nargs=argparse.REMAINDER,
            help='input files')

    args = parser.parse_args()

    if args.setOp == 'int': args.setOp = 'intersect'
    if args.setOp == 'diff': args.setOp = 'difference'

    if len(args.files) != 2:
	sys.stderr.write('need two input files\n')
	exit(5)

    return args
#---------------------------

args = parseCmdLine()

def main():
    lines0 = open(args.files[0],'r').read().split(args.delim)
    lines1 = open(args.files[1],'r').read().split(args.delim)

    if lines0[-1] == '': lines0 = lines0[:-1] # remove empty final line if any
    if lines1[-1] == '': lines1 = lines1[:-1]

    verbose("%s %d lines\n" % (args.files[0], len(lines0)))
    verbose("%s %d lines\n" % (args.files[1], len(lines1)))

    set0 = set(lines0)
    set1 = set(lines1)

    if args.setOp == 'intersect':
	resultSet = set0 & set1
    elif args.setOp == 'union':
	resultSet = set0 | set1
    elif args.setOp == 'difference':
	resultSet = set0 - set1
    else:
	sys.stderr.write("invalid set operation '%s'\n" % args.setOp)
	exit(5)

    outputDelim = '\n'	# maybe this should be a cmd line argument
    results = outputDelim.join([ element for element in resultSet])

    verbose("results %d lines\n" % (len(resultSet)))

    sys.stdout.write(results + outputDelim)

def verbose(text):
    if args.verbose: sys.stderr.write(text)

if __name__ == "__main__":
    main()
